package Vistas;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.JTableHeader;

import listener.ActionListenerActualizarCostos;
import clases.GestorProyectos;
import clases.Proyecto;

@SuppressWarnings("serial")
public class CostPanel extends JPanel{

	private JScrollPane panelCost;
	private JComboBox<String> comboMeses;
	private Form form;
	private int mesCostos;
	
	public CostPanel(Form form) throws SQLException{

		this.form = form;
		
		this.initializeAttribute();
		this.setLayout(new GridBagLayout());
		
		this.construirFiltroMes();
		
		if (this.getGestor().getProyectosActuales().isEmpty())
			this.construirAvisoDeNoDatos();
		else
			this.construirTablaCostos();
		
		this.setBackground(Color.pink);
		this.setPreferredSize(new Dimension(350,350));
		
		Border borde = BorderFactory.createLineBorder(Color.black);		
		this.setBorder(BorderFactory.createTitledBorder(borde,"Tabla de costos de proyectos", TitledBorder.CENTER, TitledBorder.TOP, null, Color.black));
		
	}
	
	public Form getForm(){
		return this.form;
	}
	
	public int getMesCostos(){
		return this.mesCostos;
	}
	
	public void setMesCostos(int mes){
		this.mesCostos = mes;
	}
	
	private GestorProyectos getGestor(){
		return this.form.getGestor();
	}
	
	public JComboBox<String> getComboMeses(){
		return this.comboMeses;
	}
	
	private void initializeAttribute(){
		
		this.panelCost = new JScrollPane();
		this.panelCost.setPreferredSize(new Dimension(200,200));		
	}
	
	private void construirAvisoDeNoDatos(){
		
		Border border = LineBorder.createGrayLineBorder();
		String texto = "<html><body>No hay datos disponibles. <br>Seleccione otro mes.</body></html>";

		JLabel label = new JLabel(texto);

		label.setHorizontalAlignment(SwingConstants.CENTER);
		label.setBackground(Color.gray);
		label.setForeground(Color.white);
		label.setOpaque(true);
		label.setBorder(border);
		label.setPreferredSize(new Dimension(200, 200));

		GridBagConstraints c = this.position(0, 2);
		c.anchor = GridBagConstraints.CENTER;
		c.weighty = 1.0;
		c.gridwidth=2;
		this.add(label,c);

	}
	
	private void construirFiltroMes(){
		
		Border border = LineBorder.createGrayLineBorder();
		GridBagConstraints c = new GridBagConstraints();
		
		JLabel label = new JLabel("Seleccionar mes: ");

		label.setHorizontalAlignment(SwingConstants.CENTER);
		label.setBackground(Color.white);
		label.setOpaque(true);
		label.setBorder(border);
		
		c = this.position(0, 1);
		c.anchor = GridBagConstraints.NORTH;
		c.weightx = 1.0;
		label.setPreferredSize(new Dimension(150, 30));
		this.add(label,c);
		
		this.construirComboMeses();
	}
	
	private void construirComboMeses(){
		
		Border border = LineBorder.createGrayLineBorder();
		GridBagConstraints c = new GridBagConstraints();
		
		String[] meses ={"Enero","Febrero","Marzo","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"};
		comboMeses = new JComboBox<String>(meses);
		
		Calendar fecha = new GregorianCalendar();
		int mesActual = fecha.get(Calendar.MONTH) + 1;		
		comboMeses.setSelectedIndex((this.mesCostos == -1)? mesActual:this.mesCostos);		
		
		comboMeses.setBackground(Color.white);
		comboMeses.setOpaque(true);
		comboMeses.setBorder(border);
		comboMeses.addActionListener(new ActionListenerActualizarCostos(this));						
		comboMeses.setPreferredSize(new Dimension(150, 30));
		
		c = this.position(1, 1);
		c.anchor = GridBagConstraints.NORTH;
		c.weightx = 1.0;
		this.add(comboMeses,c);
		
	}
	
	private void construirTablaCostos() throws SQLException{
		
		TableModel tabla = new TableModel();// definimos el objeto tableModel
		JTable tablaDeCostos = new JTable();// creamos la instancia de la tabla		
		tablaDeCostos.setModel(tabla); 
		
		tabla.addColumn("Proyecto");
		tabla.addColumn("Costo");	
		
		//cargo info de proyectos
		this.cargarDatosProyectos(tabla);
		
		//Configuraciones de fuente de la tabla
		tablaDeCostos.getTableHeader().setReorderingAllowed(false);
		tablaDeCostos.getColumnModel().getColumn(0).setMaxWidth(150);
		tablaDeCostos.getColumnModel().getColumn(1).setMaxWidth(150);
		this.configurarFuenteTabla(tablaDeCostos);	
		
		this.panelCost.setViewportView(tablaDeCostos);
		
		GridBagConstraints c = this.position(0, 2);
		c.anchor = GridBagConstraints.CENTER;
		c.weighty = 1.0;
		c.gridwidth=2;
		this.add(this.panelCost,c);
				 
	}
	
	private void cargarDatosProyectos(TableModel tabla) throws SQLException{
		
		String[] data;
		ArrayList<Proyecto> proyectos = this.getGestor().getProyectosActuales();
		
		if(!proyectos.isEmpty()){
		
			for (int i=0; i < proyectos.size(); i++){
				
				data = new String[2];
				data[0] = proyectos.get(i).getNombre();
				data[1] = "$ "+((Double)proyectos.get(i).calcularCostoProyecto()).toString();
				
				tabla.addRow(data);
			}
		}
	}
	
	private GridBagConstraints position(int posX, int posY){
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = posX;
		c.gridy = posY;
		c.insets = new Insets(5, 5, 5, 5);
		
		return c;		
	}
	
	private void configurarFuenteTabla(JTable table){
		
		Font negrilla = new Font( "Arial",Font.BOLD,12 );
		table.setFont(negrilla);
		JTableHeader th;
		th = table.getTableHeader();
		Font fuente = new Font("Arial", Font.BOLD, 15);
		th.setFont(fuente); 
	}
}
